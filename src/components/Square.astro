---
interface Props {
	isDarkSquare: boolean;
	isDarkPiece?: boolean;
	isLightPiece?: boolean;
	pieces?: string[];
	index: number;
}
const { isDarkSquare, isDarkPiece, isLightPiece, pieces, index } = Astro.props;
const pieceImages = {
	light: {
		B: "/pieceImages/lightBishop.svg",
		K: "/pieceImages/lightKing.svg",
		N: "/pieceImages/lightKnight.svg",
		Q: "/pieceImages/lightQueen.svg",
		R: "/pieceImages/lightRook.svg",
	},
	dark: {
		B: "/pieceImages/darkBishop.svg",
		K: "/pieceImages/darkKing.svg",
		N: "/pieceImages/darkKnight.svg",
		Q: "/pieceImages/darkQueen.svg",
		R: "/pieceImages/darkRook.svg",
	},
};
---

<div
	class={`border w-full h-full flex items-center justify-center p-0 ${
		isDarkSquare ? "bg-gray-600 text-white" : "bg-white text-black"
	}`}
	data-piece={(isDarkPiece || isLightPiece) && pieces
		? pieces[index % 8]
		: undefined}
	data-piece-color={isDarkPiece ? "dark" : isLightPiece ? "light" : undefined}
>
	{
		(isLightPiece || isDarkPiece) && pieces && (
			<span
				class="w-full h-full"
				data-piece={pieces[index % 8]}
				data-piece-color={
					isDarkPiece ? "dark" : isLightPiece ? "light" : undefined
				}
				style={
					(isDarkPiece || isLightPiece) && pieces
						? `background: url('${
								pieceImages[
									isDarkPiece ? "dark" : ("light" as "dark" | "light")
								][pieces[index % 8] as "B" | "K" | "N" | "Q" | "R"]
						  }') no-repeat center center/contain;`
						: ""
				}
			/>
		)
	}
</div>
